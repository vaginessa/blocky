// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Disable blocking
	// (GET /blocking/disable)
	GetBlockingDisable(w http.ResponseWriter, r *http.Request, params GetBlockingDisableParams)
	// Enable blocking
	// (GET /blocking/enable)
	GetBlockingEnable(w http.ResponseWriter, r *http.Request)
	// Blocking status
	// (GET /blocking/status)
	GetBlockingStatus(w http.ResponseWriter, r *http.Request)
	// List refresh
	// (POST /lists/refresh)
	PostListsRefresh(w http.ResponseWriter, r *http.Request)
	// Performs DNS query
	// (POST /query)
	PostQuery(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBlockingDisable operation middleware
func (siw *ServerInterfaceWrapper) GetBlockingDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockingDisableParams

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	// ------------- Optional query parameter "groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "groups", r.URL.Query(), &params.Groups)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groups", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlockingDisable(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBlockingEnable operation middleware
func (siw *ServerInterfaceWrapper) GetBlockingEnable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlockingEnable(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBlockingStatus operation middleware
func (siw *ServerInterfaceWrapper) GetBlockingStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlockingStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostListsRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostListsRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostListsRefresh(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostQuery operation middleware
func (siw *ServerInterfaceWrapper) PostQuery(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostQuery(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/blocking/disable", wrapper.GetBlockingDisable)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/blocking/enable", wrapper.GetBlockingEnable)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/blocking/status", wrapper.GetBlockingStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lists/refresh", wrapper.PostListsRefresh)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/query", wrapper.PostQuery)
	})

	return r
}

type GetBlockingDisableRequestObject struct {
	Params GetBlockingDisableParams
}

type GetBlockingDisableResponseObject interface {
	VisitGetBlockingDisableResponse(w http.ResponseWriter) error
}

type GetBlockingDisable200Response struct {
}

func (response GetBlockingDisable200Response) VisitGetBlockingDisableResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetBlockingDisable400TextResponse string

func (response GetBlockingDisable400TextResponse) VisitGetBlockingDisableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetBlockingEnableRequestObject struct {
}

type GetBlockingEnableResponseObject interface {
	VisitGetBlockingEnableResponse(w http.ResponseWriter) error
}

type GetBlockingEnable200Response struct {
}

func (response GetBlockingEnable200Response) VisitGetBlockingEnableResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetBlockingStatusRequestObject struct {
}

type GetBlockingStatusResponseObject interface {
	VisitGetBlockingStatusResponse(w http.ResponseWriter) error
}

type GetBlockingStatus200JSONResponse ApiBlockingStatus

func (response GetBlockingStatus200JSONResponse) VisitGetBlockingStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostListsRefreshRequestObject struct {
}

type PostListsRefreshResponseObject interface {
	VisitPostListsRefreshResponse(w http.ResponseWriter) error
}

type PostListsRefresh200Response struct {
}

func (response PostListsRefresh200Response) VisitPostListsRefreshResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostListsRefresh500TextResponse string

func (response PostListsRefresh500TextResponse) VisitPostListsRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type PostQueryRequestObject struct {
	Body *PostQueryJSONRequestBody
}

type PostQueryResponseObject interface {
	VisitPostQueryResponse(w http.ResponseWriter) error
}

type PostQuery200JSONResponse ApiQueryResult

func (response PostQuery200JSONResponse) VisitPostQueryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQuery400TextResponse string

func (response PostQuery400TextResponse) VisitPostQueryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Disable blocking
	// (GET /blocking/disable)
	GetBlockingDisable(ctx context.Context, request GetBlockingDisableRequestObject) (GetBlockingDisableResponseObject, error)
	// Enable blocking
	// (GET /blocking/enable)
	GetBlockingEnable(ctx context.Context, request GetBlockingEnableRequestObject) (GetBlockingEnableResponseObject, error)
	// Blocking status
	// (GET /blocking/status)
	GetBlockingStatus(ctx context.Context, request GetBlockingStatusRequestObject) (GetBlockingStatusResponseObject, error)
	// List refresh
	// (POST /lists/refresh)
	PostListsRefresh(ctx context.Context, request PostListsRefreshRequestObject) (PostListsRefreshResponseObject, error)
	// Performs DNS query
	// (POST /query)
	PostQuery(ctx context.Context, request PostQueryRequestObject) (PostQueryResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetBlockingDisable operation middleware
func (sh *strictHandler) GetBlockingDisable(w http.ResponseWriter, r *http.Request, params GetBlockingDisableParams) {
	var request GetBlockingDisableRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockingDisable(ctx, request.(GetBlockingDisableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockingDisable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBlockingDisableResponseObject); ok {
		if err := validResponse.VisitGetBlockingDisableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetBlockingEnable operation middleware
func (sh *strictHandler) GetBlockingEnable(w http.ResponseWriter, r *http.Request) {
	var request GetBlockingEnableRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockingEnable(ctx, request.(GetBlockingEnableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockingEnable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBlockingEnableResponseObject); ok {
		if err := validResponse.VisitGetBlockingEnableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetBlockingStatus operation middleware
func (sh *strictHandler) GetBlockingStatus(w http.ResponseWriter, r *http.Request) {
	var request GetBlockingStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockingStatus(ctx, request.(GetBlockingStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockingStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBlockingStatusResponseObject); ok {
		if err := validResponse.VisitGetBlockingStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostListsRefresh operation middleware
func (sh *strictHandler) PostListsRefresh(w http.ResponseWriter, r *http.Request) {
	var request PostListsRefreshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostListsRefresh(ctx, request.(PostListsRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostListsRefresh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostListsRefreshResponseObject); ok {
		if err := validResponse.VisitPostListsRefreshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostQuery operation middleware
func (sh *strictHandler) PostQuery(w http.ResponseWriter, r *http.Request) {
	var request PostQueryRequestObject

	var body PostQueryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostQuery(ctx, request.(PostQueryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQuery")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostQueryResponseObject); ok {
		if err := validResponse.VisitPostQueryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
